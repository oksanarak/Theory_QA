Функциональные виды тестирования:
   • Функциональное тестирование (Functional testing)
   • Тестирование пользовательского интерфейса (GUI Testing)
   • Тестирование безопасности (Security and Access Control Testing)
   • Тестирование взаимодействия (Interoperability Testing)

Нефункциональные виды тестирования:
   • Все виды тестирования производительности:
	o нагрузочное тестирование (Performance and Load Testing)
	o стрессовое тестирование (Stress Testing)
	o тестирование стабильности или надежности (Stability / Reliability Testing)
	o объемное тестирование (Volume Testing)
   • Тестирование установки (Installation testing)
   • Тестирование удобства пользования (Usability Testing)
   • Тестирование на отказ и восстановление (Failover and Recovery Testing)
   • Конфигурационное тестирование (Configuration Testing)

Связанные с изменениями виды тестирования:
   • Дымовое тестирование (Smoke Testing)
   • Регрессионное тестирование (Regression Testing)
   • Повторное тестирование (Re-testing)
   • Тестирование сборки (Build Verification Test)
   • Санитарное тестирование или проверка согласованности/исправности (Sanity Testing)

	Функциональное тестирование - рассматривает заранее указанное поведение и основывается на анализе спецификаций функциональности компонента или системы в 
целом.

	Тестирование пользовательского интерфейса (GUI Testing) — функциональная проверка интерфейса на соответствие требованиям — размер, шрифт, цвет, 
consistent behavior.

	Тестирование безопасности — это стратегия тестирования, используемая для проверки безопасности системы, а также для анализа рисков, связанных с 
обеспечением целостного подхода к защите приложения, атак хакеров, вирусов, несанкционированного доступа к конфиденциальным данным.

	Тестирование взаимодействия (Interoperability Testing) — это функциональное тестирование, проверяющее способность приложения взаимодействовать с 
одним и более компонентами или системами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование.

	Нагрузочное тестирование — это автоматизированное тестирование, имитирующее работу определенного количества бизнес-пользователей на каком-либо общем 
(разделяемом ими) ресурсе.

	Стрессовое тестирование (Stress Testing) - позволяет проверить, насколько приложение и система в целом работоспособны в условиях стресса и также 
оценить способность системы к регенерации, т.е. к возвращению к нормальному состоянию после прекращения воздействия стресса. Стрессом в данном контексте 
может быть повышение интенсивности выполнения операций до очень высоких значений или аварийное изменение конфигурации сервера. Также одной из задач при 
стрессовом тестировании может быть оценка деградации производительности, таким образом цели стрессового тестирования могут пересекаться с целями 
тестирования производительности.

	Объемное тестирование (Volume Testing) - задачей объемного тестирования является получение оценки производительности при увеличении объемов данных в 
базе данных приложения.

	Тестирование стабильности или надежности (Stability / Reliability Testing) - задачей тестирования стабильности (надежности) является проверка 
работоспособности приложения при длительном (многочасовом) тестировании со средним уровнем нагрузки.

	Тестирование установки - направленно на проверку успешной инсталляции и настройки, а также обновления или удаления программного обеспечения.

	Тестирование удобства пользования — это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и 
привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Сюда также входит:
User eXperience (UX) — ощущение, испытываемое пользователем во время использования цифрового продукта, в то время как User interface — это инструмент, 
позволяющий осуществлять интеракцию «пользователь — веб-ресурс».

	Тестирование на отказ и восстановление (Failover and Recovery Testing) - проверяет тестируемый продукт с точки зрения способности противостоять и 
успешно восстанавливаться после возможных сбоев, возникших в связи с ошибками программного обеспечения, отказами оборудования или проблемами связи 
(например, отказ сети). Целью данного вида тестирования является проверка систем восстановления (или дублирующих основной функционал систем), которые, в 
случае возникновения сбоев, обеспечат сохранность и целостность данных тестируемого продукта.

	Конфигурационное тестирование (Configuration Testing) — специальный вид тестирования, направленный на проверку работы программного обеспечения при 
различных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т.д.).

	Дымовое (Smoke) тестирование - рассматривается как короткий цикл тестов, выполняемый для подтверждения того, что после сборки кода 
(нового или исправленного) устанавливаемое приложение, стартует и выполняет основные функции.

	Регрессионное тестирование — это вид тестирования направленный на проверку изменений, сделанных в приложении или окружающей среде (починка дефекта, 
слияние кода, миграция на другую операционную систему, базу данных, веб сервер или сервер приложения), для подтверждения того факта, что существующая 
ранее функциональность работает как и прежде. Регрессионными могут быть как функциональные, так и нефункциональные тесты.

	Повторное тестирование (Re-testing) — тестирование, во время которого исполняются тестовые сценарии, выявившие ошибки во время последнего запуска, 
для подтверждения успешности исправления этих ошибок.
В чем разница между regression testing и re-testing?
Re-testing — проверяется исправление багов.
Regression testing — проверяется то, что исправление багов, а также любые изменения в коде приложения, не повлияли на другие модули ПО и не вызвало новых 
багов.

	Тестирование сборки или Build Verification Test — тестирование направленное на определение соответствия выпущенной версии критериям качества для 
начала тестирования. По своим целям является аналогом Дымового Тестирования, направленного на приемку новой версии в дальнейшее тестирование или 
эксплуатацию. Вглубь оно может проникать дальше, в зависимости от требований к качеству выпущенной версии.

	Санитарное тестирование — это узконаправленное тестирование достаточное для доказательства того, что конкретная функция работает согласно заявленным 
в спецификации требованиям. Является подмножеством регрессионного тестирования. Используется для определения работоспособности определенной части приложения
после изменений произведенных в ней или окружающей среде. Обычно выполняется вручную.


Подходы к интеграционному тестированию:
	• Снизу вверх (Bottom Up Integration). Все низкоуровневые модули, процедуры или функции собираются воедино и затем тестируются. После чего собирается
следующий уровень модулей для проведения интеграционного тестирования. Данный подход считается полезным, если все или практически все модули, 
разрабатываемого уровня, готовы. Также данный подход помогает определить по результатам тестирования уровень готовности приложения.
	• Сверху вниз (Top Down Integration). Вначале тестируются все высокоуровневые модули, и постепенно один за другим добавляются низкоуровневые. Все 
модули более низкого уровня симулируются заглушками с аналогичной функциональностью, затем по мере готовности они заменяются реальными активными 
компонентами. Таким образом мы проводим тестирование сверху вниз.
	• Большой взрыв («Big Bang» Integration). Все или практически все разработанные модули собираются вместе в виде законченной системы или ее основной 
части, и затем проводится интеграционное тестирование. Такой подход очень хорош для сохранения времени. Однако если тест-кейсы и их результаты записаны не 
верно, то сам процесс интеграции сильно осложнится, что станет преградой для команды тестирования при достижении основной цели интеграционного тестирования.	












